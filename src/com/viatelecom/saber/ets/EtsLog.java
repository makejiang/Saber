package com.viatelecom.saber.ets;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import android.util.Log;

import com.viatelecom.saber.Application;
import com.viatelecom.saber.FileUtil;

public class EtsLog extends EtsDevice {
    
    // log file
    FileOutputStream _fileLog = null;
    int _logSize = 0;
    
    // msgs in cfg
    private List<EtsMsg> _etsMsgs = new ArrayList<EtsMsg>();
    private List<EtsMsg> _etsMsgsStop = new ArrayList<EtsMsg>();
    
    private void genStopMsgs() {
        String[] stopMsgStr = new String[]{
            "Raw Tx: Len=5, 0x65 0x00 0x00 0x00 0x00",      // cp spy
            "Raw Tx: Len=6, 0x98 0x08 0x00 0x00 0x00 0x00", // dspm trace
            "Raw Tx: Len=6, 0x99 0x08 0x00 0x00 0x00 0x00", // dspm spy
            "Raw Tx: Len=6, 0x80 0x0c 0x00 0x00 0x00 0x00", // dspv trace
            "Raw Tx: Len=6, 0x81 0x0c 0x00 0x00 0x00 0x00", // dspv spy
            "Raw Tx: Len=283, 0x64 0x00 0x00 0x00 0x00 0x00 0x13 0x01 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00",
            "Raw Tx: Len=283, 0x64 0x00 0x00 0x00 0x13 0x01 0x13 0x01 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00",
            "Raw Tx: Len=283, 0x64 0x00 0x00 0x00 0x26 0x02 0x13 0x01 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00",
            "Raw Tx: Len=283, 0x64 0x00 0x00 0x00 0x39 0x03 0x13 0x01 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00",
            "Raw Tx: Len=283, 0x64 0x00 0x00 0x00 0x4c 0x04 0x13 0x01 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00",
            "Raw Tx: Len=10, 0x64 0x00 0x00 0x00 0x5f 0x05 0x02 0x00 0x00 0x00"
        };
        
        for(String msgStr:stopMsgStr){
            _etsMsgsStop.add(EtsMsg.parse(msgStr));
        }
    }
    
    /**
     * download status
     * @author kma
     *
     */
    public enum LogStatus{
        Logging,            // Logging data to sd card
        Error            // error
    }
    
    /**
     * called when the log process need notify the caller
     * @author kma
     *
     */
    public interface EtsLogCallback {
        void onProcess(LogStatus status, String info);
    }
    
    private EtsLogCallback _callback = null;

    public EtsLog(Application app, EtsLogCallback callback) {
        super(app);
        
        // set the callback
        if (callback!=null){
            _callback = callback;        
        } else {
            _callback = new EtsLogCallback(){
                public void onProcess(LogStatus status, String info) {
                    if (status == LogStatus.Error){
                        Log.e(Application.TagApp, info);
                    } else {
                        Log.i(Application.TagApp, info);
                    }
                }
            };
        }
        
        // generate stop message
        genStopMsgs();
                
    }

    
    ////////////////////////////////////////////////////////////
    // for test
    public void test(Boolean start) {
        if(start){
            String cfgPathName = android.os.Environment.getExternalStorageDirectory()+"/cbp/cfg/test.bcfg";
            try {
                start(cfgPathName);
            } catch (EtsException e) {
                Log.e("etslog_exception", e.getMessage());
            }

        } else {
            stop();
        }

    }    
    /////////////////////////////////////////////////////////

    /**
     * start the log process
     * @param cfgPath
     * @param callback
     * @throws EtsException
     */
    public void start(String cfgPath) throws EtsException {
        
        if(cfgPath==null){
            throw new EtsException("path of config file is null");
        }
        
        if(mSerialPort!=null){
            throw new EtsException("Log thread has been started");
        }
        
        // check the sd card
        _callback.onProcess(LogStatus.Logging, "Checking the sd card");
        boolean sdCardValid = android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED) ;
        if (!sdCardValid){
            throw new EtsException("sd card is not exist");
        }
        
        // create the ets port device
        _callback.onProcess(LogStatus.Logging, "openning the ets device");
        if (!create()) {
            throw new EtsException("open the ets device failed");
        }
        
        // parse the cfg file and get etsmsg list
        _callback.onProcess(LogStatus.Logging, "parsing the config file");
        if (!parseCfgFile(cfgPath)) {
            destroy();
            throw new EtsException("open cfg file failed");
        }
        
        // create the log file
        if (!createLogfile()){
            destroy();
            throw new EtsException("create log file failed");
        }
        
        StartRead();
        
        // read all message in cbp's buffer
        _callback.onProcess(LogStatus.Logging, "reading buffer data in cbp");
        try {
            Thread.sleep(2000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        
        // send thems to serial port
        _callback.onProcess(LogStatus.Logging, "writing config to ets device");
        for(EtsMsg _msg:_etsMsgs){
            write(_msg);
            try {
                Thread.sleep(20);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
        
        _callback.onProcess(LogStatus.Logging, "log process started");
        
        
    }
    
    /**
     * stop the log process
     */
    public void stop() { 
        
        // send stop all spy and all trace
        _callback.onProcess(LogStatus.Logging, "stop config on ets device");
        for(EtsMsg _msg:_etsMsgsStop){
            write(_msg);
            try {
                Thread.sleep(20);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
        
        // close the port and stop the read thread
        _callback.onProcess(LogStatus.Logging, "closing ets device");
        this.destroy();
        
        // close the file
        if (_fileLog!=null) {
            try {
                _fileLog.close();
                _fileLog = null;
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        
        _callback.onProcess(LogStatus.Logging, "log process stoped");
    }
    
    @Override
    protected void onDataReceived(byte[] buffer, int size) {
        if (_fileLog==null) {
            return;
        }
        
        try    {
            // get msgs from buffer
            List<EtsMsg> msgs = EtsMsg.parse(buffer, size); 
            for(EtsMsg msg:msgs) {
                
                // write msgs to log
                byte[] buf = msg.getLogEntry();
                _fileLog.write(buf);
                
                //_callback.onProcess(LogStatus.Logging, "add a log:"+ buf.length + " bytes");
                _logSize += buf.length;
            }
            
        } catch (FileNotFoundException e) {
            _callback.onProcess(LogStatus.Error, "write log file failed");
            e.printStackTrace();
        } catch (IOException e){
            _callback.onProcess(LogStatus.Error, "write log file failed");
            e.printStackTrace();
        }
    }

    
    private Boolean createLogfile() {
        
        Date today = new Date();
        SimpleDateFormat f = new SimpleDateFormat("yyyy.MM.dd_HH.mm.ss");
        String logName = f.format(today) + ".dat";
        
        File fDir = new File(FileUtil.getLogDir());
        if(!fDir.exists() || !fDir.isDirectory()) {
            if (!fDir.mkdirs()) {
                return false;
            }
        }
        
        fDir = null;
        
        try {
            if(_fileLog!=null){
                _fileLog.close();
            }
            
            _fileLog = new FileOutputStream(FileUtil.getLogDir()+logName);
            byte[] header = new byte[]{0x53, 0x43, 0x43, 0x53, 0x53, 0x54, 0x40, 0x45, 0x02, 0x00};
            _fileLog.write(header);
            
            _logSize = 0;
            _callback.onProcess(LogStatus.Logging, "created log file:"+logName);
            
        } catch (FileNotFoundException e) {
            e.printStackTrace();
            return false;
        } catch (IOException e) {
            e.printStackTrace();
            return false;
        }
        
        return true;
    }

    /**
     * read the bcfg file and parse it in msg list
     * @param path
     * @return
     */
    private Boolean parseCfgFile(String path){
        _etsMsgs.clear();
        
        try {
            BufferedReader fileCfg = new BufferedReader(new FileReader(path), 1024*1024);
            while(true){
                String line=fileCfg.readLine();
                if (line==null){
                    break;
                }
                
                EtsMsg msg = EtsMsg.parse(line);
                if (msg!=null) {
                    _etsMsgs.add(msg);
                }
            }
            
            fileCfg.close();
            
        } catch (FileNotFoundException e) {
            e.printStackTrace();
            return false;
        } catch (IOException e) {
            e.printStackTrace();
            return false;
        }
        
        return true;
    }
}
